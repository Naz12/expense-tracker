// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For credentials authentication
  accounts      Account[]
  sessions      Session[]
  categories    Category[]
  transactions  Transaction[]
  recurringTransactions RecurringTransaction[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id          String   @id @default(cuid())
  name        String
  type        String   // INCOME or EXPENSE
  isDefault   Boolean  @default(false)
  color       String   @default("#3B82F6")
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  recurringTransactions RecurringTransaction[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([name, type])
  @@index([userId])
}

model Transaction {
  id          String   @id @default(cuid())
  amount      Decimal
  description String
  type        String   // INCOME or EXPENSE
  date        DateTime
  userId      String
  categoryId  String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([date])
  @@index([categoryId])
}

model RecurringTransaction {
  id             String   @id @default(cuid())
  amount         Decimal
  description    String
  type           String   // INCOME or EXPENSE
  frequency      String   // DAILY, WEEKLY, MONTHLY, YEARLY
  startDate      DateTime
  endDate        DateTime?
  isActive       Boolean  @default(true)
  nextOccurrence DateTime
  userId         String
  categoryId     String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category       Category @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
  @@index([nextOccurrence])
}
